 Array: Push Front
Given array and an additional value, insert this
value at the beginning of the array. Do this
without using any built-in array methods.


Array: Pop Front
Given array, remove and return the value at the
beginning of the array. Do this without using any
built-in array methods except pop().

Array: Insert At
Given array, index, and additional value, insert
the value into array at given index. Do this
without using built-in array methods. You can
think of pushFront(arr,val) as equivalent to
insertAt(arr,0,val).

Array: Remove At
Given array and an index into array, remove and
return the array value at that index. Do this
without using built-in array methods except
pop(). Think of popFront(arr) as equivalent
to removeAt(arr,0).

Array: Swap Pairs
Swap positions of successive pairs of values of given array. If length is odd, do not change the final
element. For [1,2,3,4], return [2,1,4,3]. For example, change input ["Brendan",true,42] to
[true,"Brendan",42]. As with all array challenges, do this without using any built-in array methods.

Array: Remove Duplicates
Sara is looking to hire an awesome web developer and has received applications from various sources.
Her assistant alphabetized them but noticed some duplicates. Given a sorted array, remove duplicate
values. Because array elements are already in order, all duplicate values will be grouped together. As
with all these array challenges, do this without using any built-in array methods.
Second: solve this without using any nested loops.

Array: Min to Front
Given an array of comparable values, move the lowest element to array’s front, shifting backward any
elements previously ahead of it. Do not otherwise change the array’s order. Given [4,2,1,3,5],
change it to [1,4,2,3,5] and return it. As always, do this without using built-in functions.

Array: Reverse
Given a numerical array, reverse the order of values, in-place. The reversed array should have the
same length, with existing elements moved to other indices so that order of elements is reversed.
Working ‘in-place’ means that you cannot use a second array – move values within the array that you
are given. As always, do not use built-in array functions such as splice().

Array: Rotate
Implement rotateArr(arr, shiftBy) that accepts array and offset. Shift arr’s values to the right
by that amount. ‘Wrap-around’ any values that shift off array’s end to the other side, so that no data is
lost. Operate in-place: given ([1,2,3],1), change the array to [3,1,2]. Don’t use built-in functions.
Second: allow negative shiftBy (shift L, not R).
Third: minimize memory usage. With no new array, handle arrays/shiftBys in the millions.
Fourth: minimize the touches of each element.

Array: Filter Range
Alan is good at breaking secret codes. One method is to eliminate values that lie within a specific
known range. Given arr and values min and max, retain only the array values between min and max.
Work in-place: return the array you are given, with values in original order. No built-in array functions.

Array: Concat
Replicate JavaScript’s concat(). Create a standalone function that accepts two arrays. Return a new
array containing the first array’s elements, followed by the second array’s elements. Do not alter the
original arrays. Ex.: arrConcat( ['a','b'], [1,2] ) should return new array ['a','b',1,2].

Array: Remove Negatives
Implement removeNegatives() that accepts an array, removes negative values, and returns the
same array (not a copy), preserving non-negatives’ order. As always, do not use built-in array functions.
Second: don’t use nested loops.

Array: Second-to-Last
Return the second-to-last element of an array.
Given [42,true,4,"Kate",7], return
"Kate". If array is too short, return null.

Array: Second-Largest
Return the second-largest element of an array.
Given [42,1,4,Math.PI,7], return 7. If the
array is too short, return null.

Array: Nth-to-Last
Return the element that is N-from-array’s-end.
Given ([5,2,3,6,4,9,7],3), return 4. If the
array is too short, return null.

Array: Nth-Largest
Liam has "N" number of Green Belt stickers for
excellent Python projects. Given arr and N,
return the Nth-largest element, where (N-1)
elements are larger. Return null if needed.

Array: Shuffle
In JavaScript, the Array object has numerous useful methods. It does not, however, contain a method
that will randomize the order of an array’s elements. Let’s create shuffle(arr), to efficiently shuffle a
given array’s values. Work in-place, naturally. Do you need to return anything from your function?

Array: Remove Range
Given array, and indices start and end, remove vals in that index range, working in-place (hence
shortening the array). Given ([20,30,40,50,60,70],2,4), change to [20,30,70] and return it.

Array: Intermediate Sums
You will be given an array of numbers. After every tenth element, add an additional element containing
the sum of those ten values. If the array does not end aligned evenly with ten elements, add one last
sum that includes those last elements not yet been included in one of the earlier sums. Given the array
[1,2,1,2,1,2,1,2,1,2,1,2,1,2], change it to [1,2,1,2,1,2,1,2,1,2,15,1,2,1,2,6].

Array: Double Trouble
Create a function that changes a given array to list each original element twice, retaining original order.
Convert [4,"Ulysses",42,false] to [4,4,"Ulysses","Ulysses",42,42,false,false].

Array: Zip It 
Create a standalone function that accepts two arrays and combines their values sequentially into a new array, at alternating indices starting with first array. Extra values from either array should be included  afterward. Given [1,2] and [10,20,30,40], return new array containing [1,10,2,20,30,40].  
Second: combine the two arrays’ values into the first array, instead of into a new array. Much more fun!  

String:  Remove Blanks 
Create a function that, given a string, returns all of that string’s contents, but without blanks. If given the string " Pl ayTha tF u nkyM usi c ", return "PlayThatFunkyMusic".  


String: Get Digits 
Create a JavaScript function that given a string, returns the integer made from the string’s digits. Given  "0s1a3y5w7h9a2t4?6!8?0", the function should return the number 1357924680. 
